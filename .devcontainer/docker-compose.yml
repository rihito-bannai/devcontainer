# https://docs.docker.com/compose/compose-file/
# https://docs.docker.jp/index.html

version: "3.8"

services:
  db:
    build:
      # 「context: .」「dockerfile: Dockerfile」ともできるが、.devcontainerが必要だということを示すためにこうしている
      context: ..
      dockerfile: .devcontainer/db/Dockerfile-db
    platform: linux/x86_64  # M1mac用。ただ、M1mac以外のパソコンに対しては影響を与えないので、M1macじゃないからといってこの行を消す必要はない
    env_file:
      - ./db/.env_db
    volumes:
      # long syntax（--mountオプションと同等）
      - type: volume
        source: db-data
        target: /var/lib/mysql

  app:
    build:
      context: ..
      dockerfile: .devcontainer/app/Dockerfile-app
      args:
        - UBUNTU_VER=20.04
        - PYTHON3_VER=3.10.4
        - POETRY_VER=1.1.13
        - MODE=create  # 新規プロジェクト作成の際は"create"、既存のプロジェクトが存在する場合は"setup"を指定
        - PROJECT_NAME=your_project_name
        - DJANGO_MAJOR_VER=3.2
        - DJANGO_MINOR_VER=13
        - ENVIRONS=9.5.0
        - GIT_EMAIL=your_git_email@example.com
        - GIT_NAME=YourGitName
        - GIT_CORE_EDITOR=code # --wait
    # 先にdbを起動させてからappを立ち上げる
    depends_on:
      - db
    volumes:
      - ..:/home/workspace  # /home/workspaceは初期状態では存在してないので、short syntax（-vオプションと同等）でマウントする
    tty: true  # コンテナが起動し続けるようにする
    ports:
      # 左は公開用のポート、右は転送先コンテナのポート
      # 転送先ポートは、Djangoサーバーを起動するときのポートに合わせる必要がある
      - 8000:8000  

  # http:
  #   build:
  #     context: ..
  #     dockerfile: .devcontainer/http_server/Dockerfile-http

volumes:
  db-data:
